{"version":3,"sources":["components/Header.js","components/resources/dnatoprotein.js","components/Search.js","components/Results.js","Home.js","Login.js","Signup.js","App.js","index.js"],"names":["Header","Navbar","bg","expand","Container","to","Brand","Toggle","Collapse","id","Nav","className","Link","convertAminoAcids","bases","tmp","protein","i","length","j","Search","props","React","useState","rnaButtonsDisabled","setRnaButtonsDisabled","dnaButtonsDisabled","setDnaButtonsDisabled","newConversion","input","conversionType","output","results","timestamp","Date","hours","getHours","ampm","getMonth","getDate","getFullYear","getMinutes","formatTime","slice","setResults","Form","Group","controlId","onChange","e","target","value","toUpperCase","match","checkForDNA","Control","size","type","placeholder","Button","disabled","variant","onClick","document","getElementById","toLowerCase","sequence","JSON","stringify","fetch","method","headers","body","then","response","json","message","console","log","hits","description","sciname","catch","error","OverlayTrigger","placement","overlay","Tooltip","style","visibility","dna","rnaToDna","rna","dnaToRna","minus_strand","dnaComplement","Dnatoprotein","Results","Table","responsive","map","result","wordBreak","Home","App","class","name","Signup","action","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b4bdc764.chunk.js","sourcesContent":["import { Navbar, Nav, Container } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\n\n\nfunction Header() {\n    return (\n        <Navbar bg=\"light\" expand=\"sm\">\n            <Container>\n                <LinkContainer to=\"/\">\n                    <Navbar.Brand>DNSAR</Navbar.Brand>\n                </LinkContainer>\n                <Navbar.Toggle aria-controls=\"header-navbar\" />\n                <Navbar.Collapse id=\"header-navbar\">\n                    <Nav className=\"me-auto\">\n                        <LinkContainer to=\"/login\">\n                            <Nav.Link>Log In</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/signup\">\n                            <Nav.Link>Create Account</Nav.Link>\n                        </LinkContainer>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n}\n\nexport default Header;","// #include <iostream>\n// #include <string>\n// #include <vector>\n\nfunction convertAminoAcids(bases) {\n    var tmp = \"\", protein = \"\";\n    for (var i = 0; i < bases.length/3; i++) {\n      var j = i*3;\n      tmp = bases[j];\n      tmp += bases[j+1];\n      tmp += bases[j+2];\n      if (tmp[0] === 'A') { // Done\n        if (tmp[1] === 'A') {\n          if (tmp[2] === 'A' || tmp[2] === 'G') {\n            protein += \"K\"; // Lysine\n          }else {\n            protein += \"N\"; // Asparagine\n          }\n        } else if (tmp[1] === 'C') {\n          protein += \"T\"; // Threonine\n        } else if (tmp[1] === 'G') {\n          if (tmp[2] === 'A' || tmp[2] === 'G') {\n            protein += \"R\"; // Arginine\n          } else {\n            protein += \"S\"; // Serine\n          }\n        } else {\n          if (tmp[2] === 'G') {\n            protein += \"~START~\"; // Methionine\n          } else {\n            protein += \"I\"; // Isoleucine\n          }\n        }\n      } else if (tmp[0] === 'C') { // Done\n        if (tmp[1] === 'A') {\n          if (tmp[2] === 'A' || tmp[2] === 'G') {\n            protein += \"Q\"; // Glutamine\n          } else {\n            protein += \"H\"; // Histidine\n          }\n        } else if (tmp[1] === 'C') {\n          protein += \"P\"; // Proline\n        } else if (tmp[1] === 'G') {\n          protein += \"R\"; // Arginine\n        } else {\n          protein += \"L\"; // Leucine\n        }\n      } else if (tmp[0] === 'G') { // Done\n        if (tmp[1] === 'A') {\n          if (tmp[2] === 'A' || tmp[2] === 'G') {\n            protein += \"E\"; // Glutamic Acid\n          } else {\n            protein += \"D\"; // Aspartic Acid\n          }\n        } else if (tmp[1] === 'C') {\n          protein += \"A\"; // Alanine\n        } else if (tmp[1] === 'G') {\n          protein += \"G\"; // Glycine\n        } else {\n          protein += \"V\"; // Valine\n        }\n      } else { // Done\n        if (tmp[1] === 'A') {\n          if (tmp[2] === 'A' || tmp[2] === 'G') {\n            protein += \"~STOP~\"; // Stop Codon\n          } else {\n            protein += \"Y\"; // Tyrosine\n          }\n        } else if (tmp[1] === 'C') {\n          protein += \"S\"; // Serine\n        } else if (tmp[1] === 'G') {\n          if (tmp[2] === 'G') {\n            protein += \"W\"; // Tryptophan\n          } else if (tmp[2] === 'A') {\n            protein += \"~STOP~\"; // Stop Codon\n          } else {\n            protein += \"C\"; // Cysteine\n          }\n        } else {\n          if (tmp[2] === 'A' || tmp[2] === 'G') {\n            protein += \"L\"; // Leucine\n          } else {\n            protein += \"F\"; // Phenylaline\n          }\n        }\n      }\n    }\n    return protein;\n  };\n  export default convertAminoAcids;\n  // function main(argc) {\n  //   if (argc != 2) { // Checking to make sure the number of arguments is valid\n  //    console.log('Usage: <call> <sequence></sequence>');\n  //    return 0;\n  //  }\n  //  var dna = argc;\n  //  var protein = convertAminoAcids(dna);\n  //  console.log(protein);\n  //  return;\n  \n  // }\n  ","import React from 'react';\nimport { Container, Form, Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport Dnatoprotein from './resources/dnatoprotein.js';\n\nfunction Search(props) {\n    const [rnaButtonsDisabled, setRnaButtonsDisabled] = React.useState(true);\n    const [dnaButtonsDisabled, setDnaButtonsDisabled] = React.useState(true);\n\n    function checkForDNA(input) {\n        const dna = /^[ACGT]+$/g;\n        return input.toUpperCase().match(dna);\n    }\n\n    function checkForRNA(input) {\n        const rna = /^[ACGU]+$/g;\n        return input.toUpperCase().match(rna);\n    }\n\n    function formatTime(timestamp) {\n        let hours = timestamp.getHours();\n        const ampm = hours < 12 ? 'AM' : 'PM';\n        if (hours === 0) {\n            hours = 12;\n        } else if (hours > 12) {\n            hours = hours - 12;\n        }\n        return `${timestamp.getMonth() + 1}/${timestamp.getDate()}/${timestamp.getFullYear()} ${hours}:${timestamp.getMinutes()} ${ampm}`\n    }\n\n    function newConversion(input, conversionType, output) {\n        const id = props.results.length + 1;\n        let timestamp = new Date();\n        timestamp = formatTime(timestamp);\n        if (input.length >= 15) {\n            input = input.slice(0, 15) + \"...\";\n        }\n        props.setResults([{\n            id,\n            timestamp,\n            input,\n            conversionType,\n            output\n        }, ...props.results])\n    }\n\n    return (\n        <Container className=\"mb-5\" >\n            <h3 className=\"my-5\">Welcome to DNSAR</h3>\n            <Form>\n                <Form.Group className=\"my-5\" controlId=\"input-dna-rna\" onChange={(e) => {\n                    checkForRNA(e.target.value) ? setRnaButtonsDisabled(false) : setRnaButtonsDisabled(true)\n                    checkForDNA(e.target.value) ? setDnaButtonsDisabled(false) : setDnaButtonsDisabled(true)\n                }} >\n                    <Form.Control size=\"lg\" type=\"text\" placeholder=\"Enter a DNA or RNA sequence\" />\n                </Form.Group>\n                <Button disabled={dnaButtonsDisabled} variant=\"dark\" className=\"mx-1\" onClick={() => {\n                    //retreives the input sequence\n                    var input = document.getElementById(\"input-dna-rna\").value.toLowerCase();\n                    \n                    //formats the input correctly\n                    //the input should be in a strigified json format \n                    var sequence = JSON.stringify({sequence: input});\n                    \n                    //fetch request to the server\n                    fetch(`http://localhost:8000/src/search`, {\n                        method: \"POST\",\n                        headers: {\n                            'Content-Type': 'application/json'\n                          },\n                        body: sequence})\n                    .then((response) => response.json())\n                    .then((json) => {\n                        //this is where the results of the request will be.  json holds results from the server\n                        if (json.message === 'No hits found') {\n                            newConversion(input.toUpperCase(), \"Search\", \"No hits found\");\n                        } else {\n                            console.log(\"hits: \",json.hits[0].description[0].sciname);\n                            newConversion(input.toUpperCase(), \"Search\", json.hits[0].description[0].sciname);\n                        }\n                    })\n                    .catch((error) => {\n                        //this is where you do error handling of the fetch request\n                        console.error(error);\n                    }); }}>Search</Button>\n                <OverlayTrigger placement=\"top\" overlay={\n                    <Tooltip style={{ visibility: rnaButtonsDisabled ? \"inherit\" : \"hidden\" }}>\n                        input doesn't look like RNA\n                    </Tooltip>\n                }>\n                    <span className=\"d-inline-block\">\n                        <Button disabled={rnaButtonsDisabled} variant=\"dark\" className=\"mx-1\" onClick={() => {\n                            const input = document.getElementById(\"input-dna-rna\").value.toUpperCase();\n                            newConversion(input, \"RNA to DNA\", rnaToDna(input));\n                        }}>RNA to DNA</Button>\n                    </span>\n                </OverlayTrigger>\n                <OverlayTrigger placement=\"top\" overlay={\n                    <Tooltip style={{ visibility: dnaButtonsDisabled ? \"inherit\" : \"hidden\" }}>\n                        input doesn't look like DNA\n                    </Tooltip>\n                }>\n                    <span className=\"d-inline-block\">\n                        <Button disabled={dnaButtonsDisabled} variant=\"dark\" className=\"mx-1\" onClick={() => {\n                            const input = document.getElementById(\"input-dna-rna\").value.toUpperCase();\n                            newConversion(input, \"DNA to RNA\", dnaToRna(input));\n                        }}>DNA to RNA</Button>\n                    </span>\n                </OverlayTrigger>\n                <OverlayTrigger placement=\"top\" overlay={\n                    <Tooltip style={{ visibility: dnaButtonsDisabled ? \"inherit\" : \"hidden\" }}>\n                        input doesn't look like DNA\n                    </Tooltip>\n                }>\n                    <span className=\"d-inline-block\">\n                        <Button disabled={dnaButtonsDisabled} variant=\"dark\" className=\"mx-1\" onClick={() => {\n                            const input = document.getElementById(\"input-dna-rna\").value.toUpperCase();\n                            newConversion(input, \"DNA to Complement\", dnaComplement(input));\n                        }}>DNA to Complement</Button>\n                    </span>\n                </OverlayTrigger>\n                <OverlayTrigger placement=\"top\" overlay={\n                    <Tooltip style={{ visibility: dnaButtonsDisabled ? \"inherit\" : \"hidden\" }}>\n                        input doesn't look like DNA\n                    </Tooltip>\n                }>\n                    <span className=\"d-inline-block\">\n                        <Button disabled={dnaButtonsDisabled} variant=\"dark\" className=\"mx-1\" onClick={() => {\n                            const input = document.getElementById(\"input-dna-rna\").value.toUpperCase();\n                            newConversion(input, \"DNA to Protein\", Dnatoprotein(input));\n                        }}>DNA to Protein</Button>\n                    </span>\n                </OverlayTrigger>\n            </Form>\n        </Container >\n    );\n}\n\n//test DNA GCAAACCAATAAACC\n\nfunction rnaToDna(input) {\n    var dna = \"\";\n\n    for (var i = 0; i < input.length; i++) {\n        if (input[i] === 'U') {\n            dna += 'T';\n        }\n        else {\n            dna += input[i];\n        }\n    }\n\n    return dna;\n}\n\nfunction dnaToRna(input) {\n    var rna = \"\";\n\n    for (var i = 0; i < input.length; i++) {\n        if (input[i] === 'T') {\n            rna += 'U';\n        }\n        else {\n            rna += input[i];\n        }\n    }\n\n    return rna;\n}\n\nfunction dnaComplement(input) {\n    var minus_strand = \"\";\n\n    for (var i = 0; i < input.length; i++) {\n        if (input[i] === 'A') {\n            minus_strand += 'T';\n        } else if (input[i] === 'T') {\n            minus_strand += 'A';\n        } else if (input[i] === 'G') {\n            minus_strand += 'C';\n        } else {\n            minus_strand += 'G';\n        }\n    }\n\n    return minus_strand;\n}\n\n// Need to convert the query to a fasta file\n// Need to query the database with blastn\n    // Ideally format the output nicely\n        // Should show the overlap of the sequences \n        // Should show the name (accession number) of the sequence\n    // Only show the top x matches (x=1 for now)\n// Need to retrieve results from out file\n// Need to return the results\n// asynch.wait\n// -task blastn\n\n\n\nexport default Search;","import Container from 'react-bootstrap/Container'\nimport Table from 'react-bootstrap/Table';\n\nfunction Results(props) {\n    return (\n        <Container>\n            <Table responsive>\n                <thead>\n                    <th>ID</th>\n                    <th>Timestamp</th>\n                    <th>Input</th>\n                    <th>Result Type</th>\n                    <th>Output</th>\n                </thead>\n                <tbody>\n                    {props.results.map(result => (\n                        <tr key={result.id}>\n                            <td>{result.id}</td>\n                            <td>{result.timestamp}</td>\n                            <td style={{ wordBreak: \"break-all\" }}>{result.input}</td>\n                            <td>{result.conversionType}</td>\n                            <td style={{ wordBreak: \"break-all\" }}>{result.output}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table >\n        </Container>\n    )\n}\n\nexport default Results;","import Header from './components/Header';\nimport Search from './components/Search';\nimport Results from './components/Results';\n\nfunction Home(props) {\n    return (\n        <>\n            <Header />\n            <Search results={props.results} setResults={props.setResults} />\n            {props.results.length > 0 && <Results results={props.results} setResults={props.setResults} />}\n        </>\n    );\n}\n\nexport default Home;","import React from \"react\";\nimport Header from './components/Header';\nimport \"./login.css\";\n\n\nexport default function App() {\n  return (\n    <> <Header />\n    <div class=\"form-container\">\n\n          <form class=\"register-form\">\n              <center><h3>DNSAR Login</h3></center>\n\n\n              <input\n                  id=\"email\"\n                  class=\"form-field\"\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n                  name=\"email\" />\n\n              <input\n                  id=\"Password\"\n                  class=\"form-field\"\n                  type=\"text\"\n                  placeholder=\"Password\"\n                  name=\"Password\" />\n\n              <button class=\"form-field\" type=\"submit\">\n                  Submit\n              </button>\n          </form>\n      </div></>\n  );\n}\n","import Header from './components/Header';\n\n\nfunction Signup() {\n    return (\n        <><Header />\n\n        \n        <div class=\"form-container\">\n        <center><h3>DNSAR Sign Up</h3></center>\n\n            <form method=\"post\" action=\"signupData\" class=\"register-form\">\n\n                <input id=\"firstName\" class=\"form-field\" type=\"text\" placeholder=\"First Name\" name=\"firstName\" />\n\n                <input id=\"lastName\" class=\"form-field\" type=\"text\" placeholder=\"Last Name\" name=\"lastName\" />\n\n                <input id=\"email\" class=\"form-field\" type=\"text\" placeholder=\"Email\" name=\"email\" />\n                \n                <input id=\"password\" class=\"form-field\" type=\"text\" placeholder=\"Password\" name=\"Password\" />\n\n                <input id=\"password\" class=\"form-field\" type=\"text\" placeholder=\"Confirm Password\" name=\"Password\" />\n\n                <button class=\"form-field\" type=\"submit\"> Create Account</button>\n            </form>\n        </div></>\n    );\n}\n\n\n\nexport default Signup;\n\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { useState } from 'react';\n\nimport Home from './Home';\nimport Login from './Login';\nimport Signup from './Signup';\n\nfunction App() {\n    const [results, setResults] = useState([]);\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <Route path=\"/signup\">\n                    <Signup />\n                </Route>\n                <Route path=\"/\">\n                    <Home results={results} setResults={setResults} />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}